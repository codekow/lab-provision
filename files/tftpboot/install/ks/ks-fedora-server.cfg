# Generated by Anaconda 39.32.6
# Generated by pykickstart v3.48
# version=DEVEL

# see https://pykickstart.readthedocs.io/en/latest/kickstart-docs.html#chapter-2-kickstart-commands-in-fedora

# ksvalidator kickstart.ks

# Use text mode install
text

# Reboot after installation
reboot

# System timezone
timezone US/Central --utc

# Keyboard layouts
keyboard --vckeymap=us --xlayouts='us'

# System language
lang en_US.UTF-8

# Root password
# rootpw --iscrypted $2b$10$dbEmfMvW0P7k06Q1VsmA2OeLw7FuhzgxIe4vP2hDmUHd9f2uNGDiu
rootpw --lock
# user --groups=wheel,kvm,input,libvirt --gecos="Ansible" --name=ansible --password=$y$j9T$FeuZQPSzTsQA85nQ.BmOZ.$IQZJZTM9ZqdyD1w4hK9iTDxoak2ioVR9rTdUuhrdG0C --iscrypted
user --groups=wheel,kvm,input,libvirt --gecos="Cory" --name=cory --plaintext=alongpassword

# Firewall configuration
firewall --enabled --port=8080:tcp,9090:tcp --service=http,https,ssh

# Network information
# network --device=link --bootproto=dhcp --activate
%include /tmp/inst.network

# Use network installation
# url --url="http://mirrors.kernel.org/fedora/releases/41/Server/x86_64/os"
# repo --name=updates
# repo --name=fedora

%include /tmp/inst.repos

# SELinux configuration
selinux --enforcing

firstboot --disable
# Do not configure the X Window System
skipx

# Clear the Master Boot Record
# zerombr

# Partition clearing information
%include /tmp/inst.disk
clearpart --initlabel --none

# System bootloader configuration
bootloader --location=mbr --append=""

# Disk partitioning information
# autopart --type=btrfs --encrypted --passphrase=alongpassword
%include /tmp/part.efi

part /boot --fstype="ext4" --size=1024
part btrfs.00 --fstype="btrfs" --size=10240 --maxsize=102400 --grow --encrypted --passphrase=alongpassword

btrfs none --data=single --label=fedora btrfs.00
btrfs /     --subvol --name=root fedora
btrfs /home --subvol --name=home fedora

%include /tmp/inst.lvm
# logvol none --vgname=vmdata  --name=vm-01-sda --size=1024 --maxsize=102400 --grow
# logvol none --vgname=vmdata  --name=vm-01-sdb --size=102400 --grow

%packages

%include /tmp/inst.packages

%end

%pre  --log=/root/ks-pre.log
set -x

# set install ttl
echo 69 > /proc/sys/net/ipv4/ip_default_ttl

disk_size(){
  DEVICE=${1:-sda}
  # disks - gibibytes
  # /sys/block/*/size is in 512 byte chunks
  DISK_GB=$(( $(cat /sys/block/${DEVICE}/size) / 2048 / 1024 ))
  echo "${DISK_GB}"
}

# disk detection
disk_ok(){
  DEVICE=${1:-sda}
  [ -e "/dev/${DEVICE}" ] || return 1
  [ $(< /sys/block/${DEVICE}/removable) == 0 ] || return 1
  [ "$(disk_size ${DEVICE})" -lt "16" ] || return 1
  blkid "${DEVICE}" >/dev/null && return 1
  DISK=${DEVICE}
}

check_disks(){
  disk_ok nvme0n1
  disk_ok sda
  disk_ok vda
}

check_disks

echo "ignoredisk --only-use=${DISK:-sda}" > /tmp/inst.disk

# lvm detection
> /tmp/inst.lvm

if vgdisplay -s | grep -q vmdata; then
  echo "exists: vg vmdata"  
else
  echo "
part pv.00 --fstype="lvm" --size=2048 --grow
volgroup vmdata --pesize=4096 pv.00
" > /tmp/inst.lvm
fi

# efi detection
if [ -d "/sys/firmware/efi" ]; then
  echo 'part /boot/efi --fstype=efi --asprimary --size=200 --fsoptions="umask=0077,shortname=winnt"' > /tmp/part.efi
else
  echo 'part biosboot --fstype=biosboot --size=1' > /tmp/part.efi
fi

# network include
> /tmp/inst.network

# setup bridge
for NET in /sys/class/net/e*
do
  NET=${NET##*/}
  INTERFACES=${NET},${INTERFACES}
  echo "network --device=${NET} --onboot=no" >> /tmp/inst.network
done

[ ! -z "${INTERFACES}" ] && \
  echo "network --device=br0 --bootproto=dhcp --bridgeslaves=${INTERFACES%,} --onboot=yes" >> /tmp/inst.network

set_repos(){
  OS_VER=41
  REPO_URL=${1:-http://mirrors.kernel.org/fedora/releases/${OS_VER}/Server/x86_64/os}

  echo 'url --url="'"${REPO_URL}"'"' >> /tmp/inst.repos
  echo "repo --name=updates" >> /tmp/inst.repos
  echo "repo --name=fedora"  >> /tmp/inst.repos
}

set_packages(){
  CASE=${1}

cat << BASE >> /tmp/inst.packages

# groups
@^server-product-environment
@container-management
@headless-management

BASE

[ -z "${CASE}" ] && return

cat << PACKAGES >> /tmp/inst.packages

# tpm / clevis / tang
clevis-*

# ops
gdisk
git
dnf-automatic
haveged
lshw
lm_sensors
smartmontools
nvme-cli
bridge-utils
testdisk
xorg-x11-xauth
skopeo
watchdog
fio
memtest86+

# virtual
guestfs-tools
libguestfs-tools
libvirt-daemon
libvirt-client
virt-manager
ksmtuned

# sushy-emulation
gcc
ipmitool
libvirt-devel
python3-devel
python3-pip

# pretty
byobu
btop
htop
iotop
pv
tree
# fastfetch

# compression
pigz
pxz
zstd
p7zip-plugins

PACKAGES
}

> /tmp/inst.packages
> /tmp/inst.repos

set_packages all
set_repos

%end

%post --nochroot
  cp /root/ks-pre.log /mnt/sysroot/root
  cp /root/debug-pkgs.log /mnt/sysroot/root

  # hostnamectl set-hostname server.example.com
  # hostnamectl --pretty set-hostname server.example.com
  # cp /etc/hostname /mnt/sysimage/etc/hostname
  # cp /etc/machine-info /mnt/sysimage/etc/machine-info

%end

%post --log=/root/ks-post.log
set -x

LUKS_DEFAULT="alongpassword"
LUKS_KEY_FILE=/root/luks-pass

genpass(){
  < /dev/urandom LC_ALL=C tr -dc Aa-zZ0-9 | head -c "${1:-32}"
}

get_luks_part(){
  for part in /dev/{s,v}d[a]* /dev/nvme0n1*
  do
    [ -e "${part}" ] || continue
    echo "${LUKS_DEFAULT}" | cryptsetup open --test-passphrase "${part}" - && LUKS_PART="${part}"
  done

  echo "${LUKS_PART}"
}

luks_add_random_key(){
  LUKS_PART=${1:-$(get_luks_part)}
  LUKS_PASS=${2:-$(genpass 8)-$(genpass 8)-$(genpass 8)-$(genpass 8)}
  LUKS_KEY_FILE="${LUKS_KEY_FILE:-/root/luks-pass}"
  LUKS_DEFAULT="${LUKS_DEFAULT:-alongpassword}"

  echo "${LUKS_PASS}" > "${LUKS_KEY_FILE}"

  printf '%s\n' "${LUKS_DEFAULT}" "${LUKS_PASS}" "${LUKS_PASS}" | \
    cryptsetup luksAddKey "${LUKS_PART}"
}

clevis_setup_root(){
  if [ -d "/sys/firmware/efi" ]; then
    systemd-analyze pcrs > /root/pcrs-ks

    cat "${LUKS_KEY_FILE}" | clevis luks bind -y -k - -d "${LUKS_PART}" tpm2 '{"pcr_ids":"0"}' || return
    # echo "${LUKS_DEFAULT}" | clevis luks bind -y -k - -d "${LUKS_PART}" tpm2 '{"pcr_ids":"0"}' || return

    printf '%s\n' "${LUKS_DEFAULT}" | \
      cryptsetup luksRemoveKey "${LUKS_PART}"
  else
    return
  fi
}

clevis_create_script(){
  echo '#!/bin/bash
  clevis luks list -d '"${LUKS_PART}"'

  clevis luks unbind -f -d '"${LUKS_PART}"' -s1
  clevis luks unbind -f -d '"${LUKS_PART}"' -s2
  cat ${LUKS_KEY_FILE} | clevis luks bind -y -k - -d '"${LUKS_PART}"' tpm2 '"'"'{"pcr_ids":"0,1,2,3,4,5,6"}'"'"'

  echo '"${LUKS_DEFAULT}"' | cryptsetup luksRemoveKey '"${LUKS_PART}"' -
  ' > /root/clevis_boot.sh
  chmod +x /root/clevis_boot.sh
}

ssh_get_gh_key(){
  GH_USER=${1:-codekow}

  # github pub keys
  curl -s https://github.com/${GH_USER}.keys
}

ssh_get_static_key(){
  OS_USER=${1:-cory}

# embedded ssh keys
echo "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIIXLGAxOZLWpV1WWRu4GnFWEHVmLiSeXsMoChi4rXvDl cory@kowdora"
}

ssh_add_user(){
  OS_USER=${1:-ansible}
  GH_USER=${2}
  OS_PATH=$(eval echo ~${OS_USER})

  mkdir -p ${OS_PATH}/.ssh

  if [ -z "${GH_USER}" ]; then
    ssh_get_static_key >> ${OS_PATH}/.ssh/authorized_keys
  else
    ssh_get_gh_key ${GH_USER} >> ${OS_PATH}/.ssh/authorized_keys
  fi

  # set user perms
  chmod 700 ${OS_PATH}/.ssh
  chmod 600 ${OS_PATH}/.ssh/authorized_keys
  chown -R ${OS_USER}: ${OS_PATH}/.ssh

  # restore selinux context with restorecon, if it is available:
  command -v restorecon > /dev/null && restorecon -RvF ${OS_PATH}/.ssh || true

  # sudo w/o password
  echo "${OS_USER}  ALL=(root) NOPASSWD:ALL" > /etc/sudoers.d/${OS_USER}
}

ssh_config_custom(){
  # disable password for ssh
  echo 'PasswordAuthentication no' > /etc/ssh/sshd_config.d/40-no-password.conf
  command -v restorecon > /dev/null && restorecon -RvF /etc/ssh/sshd_config.d/40-no-password.conf || true
}

libvirt_config(){

cat << XML > /etc/libvirt/qemu/networks/macvtap.xml
<network>
  <name>macvtap</name>
  <forward dev="wlp4s0" mode="bridge">
  <forward dev="enp1s0" mode="bridge">
  </forward>
</network>
XML

cat << XML > /etc/libvirt/qemu/networks/bridged.xml
<network>
  <name>bridged</name>
  <forward mode="bridge"/>
  <bridge name="br0"/>
</network>
XML

  # virsh net-start bridged-network
  # virsh net-autostart bridged-network

  ln -s /etc/libvirt/qemu/networks/bridged.xml \
    /etc/libvirt/qemu/networks/autostart/

cat << XML > /etc/libvirt/storage/vmdata.xml
<pool type="logical">
  <name>vmdata</name>
  <source>
    <name>vmdata</name>
    <format type="lvm2"/>
  </source>
  <target>
    <path>/dev/vmdata</path>
  </target>
</pool>
XML

  ln -s /etc/libvirt/storage/vmdata.xml \
    /etc/libvirt/storage/autostart/

  systemctl enable libvirtd
  systemctl enable libvirt-guests
}

automatic_updates(){
  systemctl enable dnf5-automatic.timer

  # dnf5 missing config
  [ -f /etc/dnf/automatic.conf ] || cp /usr/share/dnf5/dnf5-plugins/automatic.conf /etc/dnf/

  sed -i 's/apply_updates.*/apply_updates = yes/' /etc/dnf/automatic.conf
}

fix_udev_wol(){
  FILE=/etc/udev/rules.d/81-wol.rules
  echo 'ACTION=="add", SUBSYSTEM=="net", NAME=="en*", RUN+="/usr/sbin/ethtool -s $name wol g"' > ${FILE}
  command -v restorecon > /dev/null && restorecon -RvF ${FILE} || true
}

vbmcd_setup(){
  python3 -m venv --system-site-packages /opt/vbmc

  /opt/vbmc/bin/pip install -U pip
  /opt/vbmc/bin/pip install virtualbmc

cat > /etc/systemd/system/vbmcd.service <<EOF
[Install]
WantedBy = multi-user.target

[Service]
BlockIOAccounting = True
CPUAccounting = True
ExecReload = /bin/kill -HUP $MAINPID
ExecStart = /opt/vbmc/bin/vbmcd --foreground
Group = cory
MemoryAccounting = True
PrivateDevices = False
PrivateNetwork = False
PrivateTmp = False
PrivateUsers = False
Restart = on-failure
RestartSec = 2
Slice = vbmcd.slice
TasksAccounting = True
TimeoutSec = 120
Type = simple
User = cory

[Unit]
After = libvirtd.service
After = syslog.target
After = network.target
Description = vbmcd service
EOF

  systemctl daemon-reload
  systemctl enable vbmcd.service
  firewall-cmd --permanent --add-port={6230/tcp,6231/tcp,6232/tcp,6233/tcp,6234/tcp}
}

tweaks(){
  # not quiet
  sed -i '/^GRUB_CMDLINE_LINUX/ s/ rhgb quiet//' /etc/default/grub

  # enable nested virt
  sed -i 's/^# *options/options/' /etc/modprobe.d/kvm.conf

  # enable iommu
  grep -q AuthenticAMD /proc/cpuinfo && CPU=amd
  grep -q GenuineIntel /proc/cpuinfo && CPU=intel

  if [ ! -z "${CPU}" ]; then
    sed -i '/^GRUB_CMDLINE_LINUX/ s/ '${CPU}'_iommu=on iommu=pt//' /etc/default/grub
    sed -i '/^GRUB_CMDLINE_LINUX/ s/"$/ '${CPU}'_iommu=on iommu=pt"/' /etc/default/grub
  fi

  # update grub.cfg
  grub2-mkconfig -o /boot/grub2/grub.cfg

  # compress save image
  sed -i '/^save_image_format/d' /etc/libvirt/qemu.conf
  echo 'save_image_format = "gzip"' >> /etc/libvirt/qemu.conf

  # gzip faster
  if [ -e /bin/pigz ]; then
    ln -s /bin/pigz /usr/local/bin/gzip
    ln -s /bin/pigz /usr/local/bin/gunzip
  fi

  # enable haveged
  systemctl enable haveged
}

smartd_config(){
  sed -i 's/^DEVICESCAN/#DEVICESCAN/g' /etc/smartmontools/smartd.conf
  echo 'DEVICESCAN -a -o on -S on -s (S/../.././02|L/../../6/03) -H -m root -M exec /usr/libexec/smartmontools/smartdnotify -n standby,10,q' >> /etc/smartmontools/smartd.conf
}

main(){
  # ssh_add_user ansible
  ssh_add_user cory codekow
  ssh_config_custom
  luks_add_random_key
  clevis_setup_root
  # clevis_create_script
  libvirt_config
  smartd_config
  automatic_updates
  fix_udev_wol
  vmbcd_setup
  tweaks
}

main

%end
